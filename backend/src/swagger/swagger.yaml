swagger: "2.0"
info:
  title: Auth API
  description: API for user authentication and authorization
  version: 1.0.0
basePath: /api/v1
tags:
  - name: Auth
    description: Authentication and authorization endpoints
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Register a new user with the provided details
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          type: string
          required: true
          description: User's full name
        - in: formData
          name: email
          type: string
          required: true
          description: User's email address
        - in: formData
          name: password
          type: string
          required: true
          description: User's password
        - in: formData
          name: confirmPassword
          type: string
          required: true
          description: Confirm password
        - in: formData
          name: image
          type: file
          required: false
          description: User's avatar image
      responses:
        "201":
          description: User registered successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              message:
                type: string
                example: Account created successfully, please check your Gmail account to verify your email
        "409":
          description: Email already exists
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Email is already exists, try another email.
        "500":
          description: Internal server error
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Error while creating account, please try again

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      description: Login a user with the provided credentials
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/LoginBody"
      responses:
        "200":
          description: User logged in successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              data:
                type: object
                properties:
                  user:
                    $ref: "#/definitions/User"
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              refreshToken:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Incorrect email or password
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Incorrect email or password.
        "403":
          description: Email not verified
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Your email is not verified, please check your email to verify it.

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout a user
      description: Logout a user by invalidating the token
      security:
        - Bearer: []
      responses:
        "200":
          description: User logged out successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              message:
                type: string
                example: You have been logged out successfully.
        "403":
          description: Invalid or expired token
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Expired session, please login again

  /auth/refresh:
    get:
      tags:
        - Auth
      summary: Refresh access token
      description: Refresh the access token using the refresh token
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "403":
          description: Expired session or invalid token
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Expired session, please login again

  /auth/verify-Email/{token}:
    get:
      tags:
        - Auth
      summary: Verify email
      description: Verify the user's email using the verification token
      parameters:
        - in: path
          name: token
          required: true
          type: string
          description: Email verification token
      responses:
        "200":
          description: Email verified successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              message:
                type: string
                example: Email verified, now you can login to your account.
        "403":
          description: Invalid or expired token
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Invalid or expired token
        "500":
          description: Internal server error
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Error while verifying user's email

  /auth/google:
    get:
      tags:
        - Auth
      summary: Google OAuth
      description: Authenticate using Google OAuth
      responses:
        "302":
          description: Redirect to Google OAuth page

  /auth/google/callback:
    get:
      tags:
        - Auth
      summary: Google OAuth callback
      description: Callback URL for Google OAuth
      responses:
        "200":
          description: User authenticated successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              data:
                type: object
                properties:
                  user:
                    $ref: "#/definitions/User"
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "302":
          description: Redirect to login page on failure

  /auth/forgot-password:
    patch:
      tags:
        - Auth
      summary: Forgot password
      description: Request a password reset link
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/ForgotPasswordBody"
      responses:
        "200":
          description: Password reset link sent successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              message:
                type: string
                example: Please check your email for reset password link
        "404":
          description: User not found
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Invalid email, cannot find user.

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      description: Reset the user's password using the reset token
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/ResetPasswordBody"
      responses:
        "200":
          description: Password reset successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              message:
                type: string
                example: Password reset successfully, try login with the new password
        "403":
          description: Invalid or expired token
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: Invalid or expired token

  /auth/send-email:
    patch:
      tags:
        - Auth
      summary: Send email verification token
      description: Send an email verification token to the user's email
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: Success
              message:
                type: string
                example: Email sent successfully, please check your Gmail account to verify your email
        "403":
          description: User not allowed to use this endpoint
          schema:
            type: object
            properties:
              status:
                type: string
                example: Error
              message:
                type: string
                example: You are not allowed to use this endpoint

definitions:
  RegisterBody:
    type: object
    properties:
      name:
        type: string
        example: John Doe
      email:
        type: string
        example: john.doe@example.com
      password:
        type: string
        example: password123
      confirmPassword:
        type: string
        example: password123
      avatar:
        type: string
        format: binary
        example: "path/to/avatar.jpg"

  LoginBody:
    type: object
    properties:
      email:
        type: string
        example: john.doe@example.com
      password:
        type: string
        example: password123

  ForgotPasswordBody:
    type: object
    properties:
      email:
        type: string
        example: john.doe@example.com

  ResetPasswordBody:
    type: object
    properties:
      token:
        type: string
        example: "reset-token"
      password:
        type: string
        example: newpassword123
      confirmPassword:
        type: string
        example: newpassword123

  User:
    type: object
    properties:
      id:
        type: string
        example: "12345"
      name:
        type: string
        example: John Doe
      email:
        type: string
        example: john.doe@example.com
      avatar:
        type: string
        example: "https://example.com/avatar.jpg"
      emailVerified:
        type: boolean
        example: true
      isActive:
        type: boolean
        example: true

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
