generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum crdb_internal_region {
  aws_eu_central_1 @map("aws-eu-central-1")
}

model User {
  id                              String               @id @default(uuid())
  googleId                        String?              @unique
  name                            String
  avatar                          String?
  email                           String               @unique
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  emailVerified                   Boolean              @default(false)
  password                        String
  passwordChangedAt               DateTime             @default(now())
  passwordResetToken              String?
  passwordResetTokenExpiresAt     DateTime?
  role                            Roles                @default(STUDENT)
  isActive                        Boolean              @default(true)
  twoFactorAuth                   Boolean              @default(false)
  OTP                             String?
  OTPExpiresAt                    DateTime?
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  deleteAt                        DateTime?
  reviews                         Review[]
  replies                         ReviewReply[]
  comments                        Comment[]
  courses                         Order[]
  publishedCourses                Course[]             @relation("Publish")
  userCourseProgress              UserCourseProgress[]
  userVideoProgress               UserVideoProgress[]
  notificationsSent               Notification[]       @relation("sent")
  notifications                   Notification[]       @relation("recieved")

  @@index([email])
  @@index([googleId])
}

model Review {
  id        String        @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  review    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [userId], references: [id])
  course    Course        @relation(fields: [courseId], references: [id])
  Replies   ReviewReply[]
}

model ReviewReply {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])
}

model Comment {
  id              String    @id @default(uuid())
  userId          String
  videoId         String
  comment         String
  parentCommentId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  parentComment   Comment?  @relation("Reply", fields: [parentCommentId], references: [id])
  author          User      @relation(fields: [userId], references: [id])
  video           Video     @relation(fields: [videoId], references: [id])
  replies         Comment[] @relation("Reply")

  @@index([parentCommentId])
}

model Video {
  id             String              @id @default(uuid())
  courseId       String
  course         Course              @relation(fields: [courseId], references: [id])
  videoUrl       String
  videoThumbnail String
  videoLength    Int
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  title          String
  userProgress   UserVideoProgress[]
  comments       Comment[]
}

model Prerequisites {
  id        String   @id @default(uuid())
  courseId  String
  title     String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
}

model Demo {
  id       String  @id @default(uuid())
  courseId String  @unique
  url      String
  course   Course? @relation(fields: [courseId], references: [id])
}

model Category {
  id      String              @id @default(uuid())
  name    String              @unique
  courses CategoryOnCourses[]

  @@index([name])
}

model CategoryOnCourses {
  id           String   @id @default(uuid())
  courseId     String
  categoryName String
  category     Category @relation(fields: [categoryName], references: [name])
  course       Course   @relation(fields: [courseId], references: [id])
}

model Course {
  id             String               @id @default(uuid())
  publisherId    String
  publisher      User                 @relation("Publish", fields: [publisherId], references: [id])
  name           String
  price          Float
  description    String
  averageRatings Float                @default(0)
  thumbnail      String
  purchased      Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  demo           Demo?
  categories     CategoryOnCourses[]
  prerequisites  Prerequisites[]
  userProgress   UserCourseProgress[]
  reviews        Review[]
  courseData     Video[]
  buyers         Order[]
}

model UserCourseProgress {
  id                  String       @id @default(uuid())
  userId              String
  courseId            String
  status              CourseStatus @default(ONGOING)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  completedAt         DateTime?
  user                User         @relation(fields: [userId], references: [id])
  course              Course       @relation(fields: [courseId], references: [id])
  totalWatchedMinutes Int          @default(0)

  @@unique([userId, courseId])
}

model UserVideoProgress {
  id             String   @id @default(uuid())
  userId         String
  videoId        String
  watchedMinutes Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  video          Video    @relation(fields: [videoId], references: [id])
  lastWatchedAt  DateTime @updatedAt

  @@unique([userId, videoId])
}

enum CourseStatus {
  ONGOING
  COMPLETED
}

model Payment {
  id               String @id @default(uuid())
  checkout_session String
  orderId          String @unique
  customerId       String
  email            String
  order            Order  @relation(fields: [orderId], references: [id])
  price            Float
  status           String
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
  paymentInfo Payment?

  @@unique([userId, courseId])
}

model Token {
  id    String @id @default(uuid())
  token String @unique

  @@index([token])
}

model Email {
  id      String @id
  email   String
  subject String
}

model Notification {
  id         String   @id @default(uuid())
  senderId   String
  recieverId String
  text       String
  createdAt  DateTime
  opened     Boolean
  sender     User     @relation("sent", fields: [senderId], references: [id])
  reciever   User     @relation("recieved", fields: [recieverId], references: [id])
}

enum Roles {
  STUDENT
  TEACHER
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAIL
  PAID
}
